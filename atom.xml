<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>这是我的第一个博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://anzhennanqq.github.io/"/>
  <updated>2017-09-14T09:44:23.277Z</updated>
  <id>http://anzhennanqq.github.io/</id>
  
  <author>
    <name>安振男</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ajax 介绍与使用</title>
    <link href="http://anzhennanqq.github.io/2017/09/14/Ajax-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://anzhennanqq.github.io/2017/09/14/Ajax-介绍与使用/</id>
    <published>2017-09-14T09:23:14.000Z</published>
    <updated>2017-09-14T09:44:23.277Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ajax是什么？如何运用？"><a href="#Ajax是什么？如何运用？" class="headerlink" title="Ajax是什么？如何运用？"></a>Ajax是什么？如何运用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">AJAX不是新的编程语言，而是一种使用现有标准的新方法。</div><div class="line">AJAX = Asynchronous JavaScript and XML立基于非同步JavaScript和XML。简单地说，</div><div class="line">Ajax 即运用非标准的XMLHttpRequest对象，并配合服物器端的 脚本进行通讯。Ajax能够</div><div class="line">传送并接收各种格式的文件，其中包括 XML、HTML和JSON。Ajax最吸引人之处在于它的</div><div class="line">〝非同步〞性质，这意味着Ajax能做各种动作，而无须更新整个页面。如此便能透过使</div><div class="line">用者的事件更新页面的一小部分。</div><div class="line">无须重新载入整个页面，便能对服物器发送请求。</div><div class="line">分析并运用各种文件。</div></pre></td></tr></table></figure><h3 id="第一步，创建XMLHttpRequest对象"><a href="#第一步，创建XMLHttpRequest对象" class="headerlink" title="第一步，创建XMLHttpRequest对象"></a>第一步，创建XMLHttpRequest对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure><h3 id="第二步，向服务器发送请求"><a href="#第二步，向服务器发送请求" class="headerlink" title="第二步，向服务器发送请求"></a>第二步，向服务器发送请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// open( method, url, async )</span></div><div class="line"><span class="comment">// 规定请求的类型、URL 以及是否异步处理请求。</span></div><div class="line"><span class="comment">// * method：请求的类型；GET 或 POST</span></div><div class="line"><span class="comment">// * url：文件在服务器上的位置</span></div><div class="line"><span class="comment">// * async：true（异步）或 false（同步）</span></div><div class="line">xhr.open( <span class="string">'get'</span>, <span class="string">'./test.json'</span>, <span class="literal">false</span> );</div><div class="line"><span class="comment">// send( string )</span></div><div class="line"><span class="comment">// 将请求发送到服务器。</span></div><div class="line"><span class="comment">// string：仅用于 POST 请求</span></div><div class="line">xhr.send( <span class="literal">null</span> );</div></pre></td></tr></table></figure><p>请求的类型要如何选择呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">与POST相比，GET更简单也更快，并且在大部分情况下都能用。</div><div class="line">然而，在以下情况中，请使用POST请求：</div><div class="line">无法使用缓存文件（更新服务器上的文件或数据库）。</div><div class="line">向服务器发送大量数据（POST没有数据量限制）。</div><div class="line">发送包含未知字符的用户输入时，POST比GET更稳定也更可靠。</div></pre></td></tr></table></figure><p>需要注意的是：使用get请求可能会读取缓存文件，使用如下代码可以避免获取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.open( <span class="string">'get'</span>, <span class="string">`./test.php?t=<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>, <span class="literal">false</span> );</div></pre></td></tr></table></figure><p>如何发送信息？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// get 请求</span></div><div class="line">xhr.open( <span class="string">'get'</span>, <span class="string">'./test.php?name=sam&amp;age=19'</span>, <span class="literal">false</span> );</div><div class="line"><span class="comment">// get 请求不需要在 send 方法中发送数据</span></div><div class="line">xhr.send( <span class="literal">null</span> );</div><div class="line"><span class="comment">// post 请求</span></div><div class="line">xhr.open( <span class="string">'post'</span>, <span class="string">'./test.php'</span>, <span class="literal">false</span> );</div><div class="line"><span class="comment">// 需要设置请求头</span></div><div class="line"><span class="comment">// * header: 规定头的名称</span></div><div class="line"><span class="comment">// * value: 规定头的值</span></div><div class="line">xmlhttp.setRequestHeader( <span class="string">'Accept'</span>, <span class="string">'application/json'</span> );</div><div class="line">xhr.send( &#123; <span class="attr">name</span>: <span class="string">'sam'</span>, <span class="attr">age</span>: <span class="number">19</span> &#125; );</div></pre></td></tr></table></figure></p><h3 id="第三步，接收响应"><a href="#第三步，接收响应" class="headerlink" title="第三步，接收响应"></a>第三步，接收响应</h3><p>异步执行需要在发送请求前加上响应函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">xhr.onreadystatechange = handler;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 接收状态</span></div><div class="line">  <span class="keyword">if</span> ( <span class="keyword">this</span>.readyState !== <span class="number">4</span> ) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 响应状态</span></div><div class="line">  <span class="keyword">if</span> ( <span class="keyword">this</span>.status === <span class="number">200</span> ) &#123;</div><div class="line">    resolve( <span class="keyword">this</span>.response );</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reject( <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="keyword">this</span>.statusText ) );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="最终实现代码"><a href="#最终实现代码" class="headerlink" title="最终实现代码"></a>最终实现代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"> &#123; type, url, data = null, flag = true &#125; </span>) </span>&#123;</div><div class="line">  <span class="comment">// 使用了 ES6 的 Promise 对象，来传递异步操作的消息。</span></div><div class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span> (<span class="params"> resolve, reject </span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.onreadystatechange = handler;</div><div class="line">    xhr.open( type, url, flag );</div><div class="line">    xhr.send( data );</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// 接收状态</span></div><div class="line">      <span class="keyword">if</span> ( <span class="keyword">this</span>.readyState !== <span class="number">4</span> ) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 响应状态</span></div><div class="line">      <span class="keyword">if</span> ( <span class="keyword">this</span>.status === <span class="number">200</span> ) &#123;</div><div class="line">        resolve( <span class="keyword">this</span>.response );</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject( <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="keyword">this</span>.statusText ) );</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125; );</div><div class="line">  <span class="keyword">return</span> promise;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById( <span class="string">'btn'</span> );</div><div class="line">btn.addEventListener( <span class="string">'click'</span>, () =&gt; &#123;</div><div class="line">  ajax( &#123;</div><div class="line">    type: <span class="string">'get'</span>,</div><div class="line">    url: <span class="string">'./test.json'</span>,</div><div class="line">  &#125; ).then( <span class="function"><span class="keyword">function</span> (<span class="params"> result </span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( result );</div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"> error </span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error( error );</div><div class="line">  &#125; );</div><div class="line">&#125;, <span class="literal">false</span> );</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ajax是什么？如何运用？&quot;&gt;&lt;a href=&quot;#Ajax是什么？如何运用？&quot; class=&quot;headerlink&quot; title=&quot;Ajax是什么？如何运用？&quot;&gt;&lt;/a&gt;Ajax是什么？如何运用？&lt;/h3&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>这是我写的React笔记</title>
    <link href="http://anzhennanqq.github.io/2017/09/12/%E8%BF%99%E6%98%AF%E6%88%91%E5%86%99%E7%9A%84React%E7%AC%94%E8%AE%B0/"/>
    <id>http://anzhennanqq.github.io/2017/09/12/这是我写的React笔记/</id>
    <published>2017-09-12T08:27:55.000Z</published>
    <updated>2017-09-14T09:05:10.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">create-React-app是一个全局的命令行工具用来创建一个新的项目</div><div class="line">react-scripts是一个生成的项目所需要的开发依赖</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码</div><div class="line">现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件.react-scripts是唯一的额外的构造依赖</div><div class="line">在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序应用程序你需要依赖，在配置文件中编写的配置代码，反应脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化WebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[React-scripts有以下支持，都帮你配置好了：</div><div class="line">React，JSX，ES6和Flow语法支持。</div><div class="line">ES6之外的语言扩展像对象扩展运算符。</div><div class="line">直接从JavaScript导入CSS和图像文件。</div><div class="line">自动翻译CSS，所以你不需要-webkit或其他前缀。</div><div class="line">一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://anzhennanqq.github.io/2017/09/12/hello-world/"/>
    <id>http://anzhennanqq.github.io/2017/09/12/hello-world/</id>
    <published>2017-09-12T06:16:02.691Z</published>
    <updated>2017-09-12T06:16:02.692Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>

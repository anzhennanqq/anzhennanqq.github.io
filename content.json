[{"title":"Ajax 介绍与使用","date":"2017-09-14T09:23:14.000Z","path":"2017/09/14/Ajax-介绍与使用/","text":"Ajax是什么？如何运用？12345678AJAX不是新的编程语言，而是一种使用现有标准的新方法。AJAX = Asynchronous JavaScript and XML立基于非同步JavaScript和XML。简单地说，Ajax 即运用非标准的XMLHttpRequest对象，并配合服物器端的 脚本进行通讯。Ajax能够传送并接收各种格式的文件，其中包括 XML、HTML和JSON。Ajax最吸引人之处在于它的〝非同步〞性质，这意味着Ajax能做各种动作，而无须更新整个页面。如此便能透过使用者的事件更新页面的一小部分。无须重新载入整个页面，便能对服物器发送请求。分析并运用各种文件。 第一步，创建XMLHttpRequest对象1const xhr = new XMLHttpRequest(); 第二步，向服务器发送请求12345678910// open( method, url, async )// 规定请求的类型、URL 以及是否异步处理请求。// * method：请求的类型；GET 或 POST// * url：文件在服务器上的位置// * async：true（异步）或 false（同步）xhr.open( 'get', './test.json', false );// send( string )// 将请求发送到服务器。// string：仅用于 POST 请求xhr.send( null ); 请求的类型要如何选择呢？ 12345与POST相比，GET更简单也更快，并且在大部分情况下都能用。然而，在以下情况中，请使用POST请求：无法使用缓存文件（更新服务器上的文件或数据库）。向服务器发送大量数据（POST没有数据量限制）。发送包含未知字符的用户输入时，POST比GET更稳定也更可靠。 需要注意的是：使用get请求可能会读取缓存文件，使用如下代码可以避免获取： 1xhr.open( 'get', `./test.php?t=$&#123;Math.random()&#125;`, false ); 如何发送信息？1234567891011// get 请求xhr.open( 'get', './test.php?name=sam&amp;age=19', false );// get 请求不需要在 send 方法中发送数据xhr.send( null );// post 请求xhr.open( 'post', './test.php', false );// 需要设置请求头// * header: 规定头的名称// * value: 规定头的值xmlhttp.setRequestHeader( 'Accept', 'application/json' );xhr.send( &#123; name: 'sam', age: 19 &#125; ); 第三步，接收响应异步执行需要在发送请求前加上响应函数：1234567891011121314xhr.onreadystatechange = handler;function handler() &#123; // 接收状态 if ( this.readyState !== 4 ) &#123; return; &#125; // 响应状态 if ( this.status === 200 ) &#123; resolve( this.response ); &#125; else &#123; reject( new Error( this.statusText ) ); &#125;&#125; 最终实现代码123456789101112131415161718192021222324252627282930313233function ajax( &#123; type, url, data = null, flag = true &#125; ) &#123; // 使用了 ES6 的 Promise 对象，来传递异步操作的消息。 const promise = new Promise( function ( resolve, reject ) &#123; const xhr = new XMLHttpRequest(); xhr.onreadystatechange = handler; xhr.open( type, url, flag ); xhr.send( data ); function handler() &#123; // 接收状态 if ( this.readyState !== 4 ) &#123; return; &#125; // 响应状态 if ( this.status === 200 ) &#123; resolve( this.response ); &#125; else &#123; reject( new Error( this.statusText ) ); &#125; &#125; &#125; ); return promise;&#125;const btn = document.getElementById( 'btn' );btn.addEventListener( 'click', () =&gt; &#123; ajax( &#123; type: 'get', url: './test.json', &#125; ).then( function ( result ) &#123; console.log( result ); &#125;, function ( error ) &#123; console.error( error ); &#125; );&#125;, false );","categories":[],"tags":[]},{"title":"这是我写的React笔记","date":"2017-09-12T08:27:55.000Z","path":"2017/09/12/这是我写的React笔记/","text":"创建12create-React-app是一个全局的命令行工具用来创建一个新的项目react-scripts是一个生成的项目所需要的开发依赖 More info: Writing 配置环境123一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件.react-scripts是唯一的额外的构造依赖在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序应用程序你需要依赖，在配置文件中编写的配置代码，反应脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化WebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。 More info: Generating 支持123456[React-scripts有以下支持，都帮你配置好了：React，JSX，ES6和Flow语法支持。ES6之外的语言扩展像对象扩展运算符。直接从JavaScript导入CSS和图像文件。自动翻译CSS，所以你不需要-webkit或其他前缀。一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。 More info: Deployment","categories":[],"tags":[]},{"title":"Hello World","date":"2017-09-12T06:16:02.691Z","path":"2017/09/12/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]